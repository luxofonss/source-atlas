[
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::::32::443",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": null,
    "chunk_type": "service",
    "calls": [],
    "called_by": [],
    "line_start": 32,
    "line_end": 443,
    "content": "@Service\n@Slf4j\npublic class QuizServiceImpl implements QuizService {\n    private final QuizMapper quizMapper;\n    private final QuestionMapper questionMapper;\n    private final QuizRepository quizRepository;\n    private final QuestionRepository questionRepository;\n    private final QuizAttemptRepository quizAttemptRepository;\n    private final QuizAnswerRepository quizAnswerRepository;\n    private final UserRepository userRepository;\n    private final SavedQuizRepository savedQuizRepository;\n    private final PronunciationServiceImpl pronunciationService;\n    private final ResourceService resourceService;\n    public QuizServiceImpl(QuizMapper quizMapper,\n                           QuestionMapper questionMapper,\n                           QuizRepository quizRepository,\n                           QuestionRepository questionRepository,\n                           QuizAttemptRepository quizAttemptRepository,\n                           QuizAnswerRepository quizAnswerRepository,\n                           UserRepository userRepository,\n                           SavedQuizRepository savedQuizRepository,\n                           PronunciationServiceImpl pronunciationService,\n                           ResourceService resourceService) {\n        this.quizMapper = quizMapper;\n        this.questionMapper = questionMapper;\n        this.quizRepository = quizRepository;\n        this.questionRepository = questionRepository;\n        this.quizAttemptRepository = quizAttemptRepository;\n        this.quizAnswerRepository = quizAnswerRepository;\n        this.userRepository = userRepository;\n        this.savedQuizRepository = savedQuizRepository;\n        this.pronunciationService = pronunciationService;\n        this.resourceService = resourceService;\n    }\n    @Override\n    public BaseCreateUpdateResponse createQuiz(CreateQuizDto request, UUID authorId) {\n        Quiz q = quizMapper.createQuizDtoToQuiz(request);\n        q.setAuthorId(authorId);\n        quizRepository.save(q);\n        return new BaseCreateUpdateResponse(q.getId().toString());\n    }\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public BaseCreateUpdateResponse updateQuiz(CreateQuizDto request) {\n        if (request.getId() == null) {\n            throw new IllegalArgumentException(\"Quiz ID must be provided for update operation.\");\n        }\n        UUID quizId = UUID.fromString(request.getId());\n        Quiz existingQuiz = quizRepository.findById(request.getId())\n                .orElseThrow(() -> new EntityNotFoundException(\"Quiz with ID \" + request.getId() + \" not found.\"));\n        quizMapper.updateQuizFromDto(request, existingQuiz);\n        existingQuiz.setUpdatedAt(LocalDateTime.now());\n        if (request.getIsPublic()) {\n            existingQuiz.setStatus(QuizStatus.PUBLIC);\n        } else {\n            existingQuiz.setStatus(QuizStatus.DRAFT);\n        }\n        List<Question> existingQuestions = questionRepository.findByQuizId(request.getId());\n        Map<UUID, Question> existingQuestionMap = existingQuestions.stream()\n                .collect(Collectors.toMap(Question::getId, q -> q));\n        List<Question> questionsToSaveOrUpdate = new ArrayList<>();\n        Set<UUID> questionIdsInDto = request.getQuestions().stream()\n                .filter(qDto -> qDto.getId() != null)\n                .map(qDto -> UUID.fromString(qDto.getId()))\n                .collect(Collectors.toSet());\n        for (QuestionDto qDto : request.getQuestions()) {\n            if (qDto.getId() == null) {\n                Question newQuestion = questionMapper.questionDtoToQuestion(qDto);\n                newQuestion.setQuizId(quizId);\n                newQuestion.setCreatedAt(LocalDateTime.now());\n                newQuestion.setUpdatedAt(LocalDateTime.now());\n                if (!CollectionUtils.isEmpty(newQuestion.getOptions())) {\n                    for (QuestionOption option : newQuestion.getOptions()) {\n                        option.setId(UUID.randomUUID());\n                    }\n                }\n                questionsToSaveOrUpdate.add(newQuestion);\n            } else {\n                UUID qId = UUID.fromString(qDto.getId());\n                Question questionToUpdate = existingQuestionMap.get(qId);\n                if (questionToUpdate != null) {\n                    questionMapper.updateQuestionFromDto(qDto, questionToUpdate);\n                    questionToUpdate.setUpdatedAt(LocalDateTime.now());\n                    if (!CollectionUtils.isEmpty(questionToUpdate.getOptions())) {\n                        for (QuestionOption option : questionToUpdate.getOptions()) {\n                            if (option.getId() == null) {\n                                option.setId(UUID.randomUUID());\n                            }\n                        }\n                    }\n                    questionsToSaveOrUpdate.add(questionToUpdate);\n                }\n            }\n        }\n        List<Question> questionsToDelete = existingQuestions.stream()\n                .filter(eq -> !questionIdsInDto.contains(eq.getId()))\n                .collect(Collectors.toList());\n        if (!questionsToDelete.isEmpty()) {\n            questionRepository.deleteAll(questionsToDelete);\n        }\n        if (!questionsToSaveOrUpdate.isEmpty()) {\n            questionRepository.saveAll(questionsToSaveOrUpdate);\n        }\n        existingQuiz.setQuestionCount(questionRepository.countByQuizId(quizId.toString()));\n        quizRepository.save(existingQuiz);\n        return new BaseCreateUpdateResponse(existingQuiz.getId().toString());\n    }\n    @Override\n    public List<Quiz> getAllPublicQuizzes() {\n        List<Quiz> quizzes = quizRepository.findAllPublic();\n        getQuizAuthor(quizzes);\n        return quizzes;\n    }\n    @Override\n    public List<Quiz> getMyQuizzes(UUID id) {\n        List<Quiz> quizzes = quizRepository.findByUserId(id);\n        getQuizAuthor(quizzes);\n        return quizzes;\n    }\n    @Override\n    public Quiz getById(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        Set<Question> questions = new HashSet<>(questionRepository.findByQuizId(id));\n        quiz.setQuestions(questions);\n        getQuizAuthor(Collections.singletonList(quiz));\n        return quiz;\n    }\n    @Override\n    public void deleteQuiz(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        quiz.setDeletedAt(LocalDateTime.now());\n        quizRepository.save(quiz);\n    }\n    @Override\n    @Transactional\n    public BaseCreateUpdateResponse startQuiz(String quizId, UUID userId) {\n        quizRepository.findById(quizId)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        QuizAttempt quizAttempt = new QuizAttempt();\n        quizAttempt.setQuizId(UUID.fromString(quizId));\n        quizAttempt.setUserId(userId);\n        quizAttempt.setScore(BigDecimal.ZERO);\n        quizAttempt.setCorrectAnswers(0);\n        quizAttempt.setTimeSpent(0L);\n        quizAttempt.setCompletedAt(null);\n        quizAttempt.setPassed(false);\n        QuizAttempt savedAttempt = quizAttemptRepository.save(quizAttempt);\n        return new BaseCreateUpdateResponse(savedAttempt.getId().toString());\n    }\n    @Override\n    @Transactional\n    public BaseCreateUpdateResponse submitQuizQuestion(String attemptId, SubmitAnswerRequest request, UUID id) {\n        UUID questionId = UUID.fromString(request.getQuestionId());\n        QuizAttempt quizAttempt = quizAttemptRepository.findById(attemptId)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n        if (quizAttempt.getCompletedAt() != null) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_SUBMITTED);\n        }\n        Quiz quiz = quizRepository.findById(quizAttempt.getQuizId().toString()).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        if (quiz.getTimeLimit() != null && quizAttempt.getCreatedAt() != null) {\n            LocalDateTime start = quizAttempt.getCreatedAt();\n            LocalDateTime end = LocalDateTime.now();\n            long timeSpent = Duration.between(start, end).toMinutes();\n            if (timeSpent > quiz.getTimeLimit()) {\n                quizAttempt.setTimeSpent(timeSpent);\n                quizAttempt.setCompletedAt(quizAttempt.getCreatedAt().plusMinutes(timeSpent));\n                quizAttemptRepository.save(quizAttempt);\n                throw new BusinessException(ErrorConstant.QUIZ_TIME_LIMIT_EXCEEDED);\n            }\n        }\n        Question question = questionRepository.findById(request.getQuestionId())\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUESTION_NOT_FOUND));\n        if (!Objects.equals(question.getQuizId(), quizAttempt.getQuizId())) {\n            throw new BusinessException(ErrorConstant.QUESTION_DOES_NOT_BELONG_TO_QUIZ);\n        }\n        QuizAnswer quizAnswer = new QuizAnswer();\n        quizAnswer.setQuestionId(questionId);\n        if (QuestionType.MULTIPLE_CHOICE.name().equals(question.getType()) && !CollectionUtils.isEmpty(question.getOptions())) {\n            List<QuestionOption> options = question.getOptions().stream()\n                    .filter(option -> option.getId() != null && request.getSelectedOptions().contains(option.getId().toString()))\n                    .collect(Collectors.toList());\n            quizAnswer.setSelectedAnswers(options);\n        }\n        quizAnswer.setFillInBlanksAnswers(request.getFillInBlanksAnswers());\n        quizAnswer.setAnswerText(request.getAnswerText());\n        quizAnswer.setTimeTaken(request.getTimeTaken());\n        quizAnswer.setAudioUrl(request.getAudioUrl());\n        boolean isCorrect = false;\n        Integer scoreAchieved = 0;\n        switch (question.getType().toLowerCase()) {\n            case \"multiple_choice\":\n                List<String> userSelectedValues = request.getSelectedOptions() != null ?\n                        request.getSelectedOptions().stream()\n                                .filter(Objects::nonNull)\n                                .collect(Collectors.toList()) : new ArrayList<>();\n                List<String> correctOptionValues = question.getCorrectAnswer() != null ?\n                        question.getOptions().stream().filter(QuestionOption::getIsCorrect).map(i -> i.getId().toString()).sorted().toList() : new ArrayList<>();\n                userSelectedValues.sort(String::compareTo);\n                isCorrect = userSelectedValues.equals(correctOptionValues);\n                break;\n            case \"true_false\":\n                isCorrect = (request.getUserAnswerTrueFalse() != null &&\n                        request.getUserAnswerTrueFalse().equals(question.getTrueFalseAnswer()));\n                break;\n            case \"fill_in_the_blank\":\n                List<String> userFillInBlanks = request.getFillInBlanksAnswers() != null ?\n                        request.getFillInBlanksAnswers().stream()\n                                .filter(Objects::nonNull)\n                                .map(i -> i.toLowerCase().trim())\n                                .collect(Collectors.toList()) : new ArrayList<>();\n                List<String> correctBlanks = question.getCorrectBlanks() != null ?\n                        question.getCorrectBlanks().stream()\n                                .filter(Objects::nonNull)\n                                .map(i -> i.toLowerCase().trim())\n                                .collect(Collectors.toList()) : new ArrayList<>();\n                Collections.sort(userFillInBlanks);\n                Collections.sort(correctBlanks);\n                isCorrect = userFillInBlanks.equals(correctBlanks);\n                break;\n            case \"short_answer\":\n                isCorrect = (request.getAnswerText() != null &&\n                        question.getCorrectAnswer() != null &&\n                        !question.getCorrectAnswer().isEmpty() &&\n                        question.getCorrectAnswer().getFirst().equalsIgnoreCase(request.getAnswerText().trim()));\n                break;\n            case \"pronunciation\":\n                if (request.getAudioUrl() == null || request.getAudioUrl().isEmpty()) {\n                    break;\n                }\n                File audioFile = resourceService.downloadResourceFromUrl(request.getAudioUrl());\n                if (audioFile == null || !audioFile.exists()) {\n                    break;\n                }\n                String base64File = \"data:audio/ogg;;base64,\" + FileUtils.convertToBase64(audioFile);\n                if (base64File == null) {\n                    break;\n                }\n                try {\n                    PronunciationAccuracyResponseDto pronunAccuracy = pronunciationService.getAccuracy(\n                            PronunciationAccuracyRequestDto.builder()\n                                    .base64Audio(base64File)\n                                    .text(question.getPronunciationText())\n                                    .build()\n                    );\n                    isCorrect = pronunAccuracy.getPronunciationAccuracy() >= question.getAcceptRate();\n                    quizAnswer.setAnswerText(JsonUtils.toJsonString(pronunAccuracy));\n                } catch (Exception e) {\n                    log.error(\"Error while checking pronunciation accuracy: {}\", e.getMessage());\n                }\n                break;\n            default:\n                System.err.println(\"Unknown question type: \" + question.getType());\n        }\n        if (isCorrect) {\n            scoreAchieved = question.getPoints() != null ? question.getPoints() : 0;\n        }\n        quizAnswer.setCorrect(isCorrect);\n        quizAnswer.setScoreAchieved(scoreAchieved);\n        List<QuizAnswer> currentAnswers = quizAnswerRepository.findByQuizAttemptId(attemptId);\n        for (int i = 0; i < currentAnswers.size(); i++) {\n            if (currentAnswers.get(i).getQuestionId().equals(questionId)) {\n                QuizAnswer oldAnswer = currentAnswers.get(i);\n                quizAttempt.setScore(quizAttempt.getScore().subtract(BigDecimal.valueOf(oldAnswer.getScoreAchieved())));\n                if (oldAnswer.isCorrect()) {\n                    quizAttempt.setCorrectAnswers(quizAttempt.getCorrectAnswers() - 1);\n                }\n                quizAnswerRepository.delete(oldAnswer);\n                break;\n            }\n        }\n        quizAnswer.setQuizAttemptId(UUID.fromString(attemptId));\n        quizAnswerRepository.save(quizAnswer);\n        quizAttempt.setScore(quizAttempt.getScore().add(BigDecimal.valueOf(scoreAchieved)));\n        if (isCorrect) {\n            quizAttempt.setCorrectAnswers(quizAttempt.getCorrectAnswers() + 1);\n        }\n        quizAttemptRepository.save(quizAttempt);\n        return new BaseCreateUpdateResponse(quizAnswer.getId().toString());\n    }\n    @Override\n    public List<Quiz> getMyQuizAttempts(String userId) {\n        List<QuizAttempt> attempts = quizAttemptRepository.findByUserId(UUID.fromString(userId));\n        if (CollectionUtils.isEmpty(attempts)) {\n            return Collections.emptyList();\n        }\n        Set<String> quizId = attempts.stream()\n                .map(QuizAttempt::getQuizId)\n                .map(UUID::toString)\n                .collect(Collectors.toSet());\n        List<Quiz> quizzes = quizRepository.findByIdIn(quizId);\n        if (CollectionUtils.isEmpty(quizzes)) {\n            return Collections.emptyList();\n        }\n        getQuizAuthor(quizzes);\n        Map<UUID, List<QuizAttempt>> attemptMap = attempts.stream()\n                .collect(Collectors.groupingBy(QuizAttempt::getQuizId));\n        for (Quiz quiz : quizzes) {\n            quiz.setQuizAttempts(new HashSet<>(attemptMap.get(quiz.getId())));\n        }\n        return quizzes;\n    }\n    @Override\n    public QuizAttempt getAttempt(String attemptId, UUID userId) {\n        QuizAttempt attempt = quizAttemptRepository.findById(attemptId).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n        Quiz quiz = this.getById(attempt.getQuizId().toString());\n        getQuizAuthor(Collections.singletonList(quiz));\n        attempt.setQuiz(quiz);\n        List<QuizAnswer> answers = quizAnswerRepository.findByQuizAttemptId(attemptId);\n        attempt.setAnswers(answers);\n        return attempt;\n    }\n    @Override\n    public void submitQuizComplete(String attemptId, UUID id) {\n        QuizAttempt attempt = quizAttemptRepository.findById(attemptId).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n        if (!id.equals(attempt.getUserId())) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_BELONG_TO_USER);\n        }\n        if (attempt.getCompletedAt() != null) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_SUBMITTED);\n        }\n        attempt.setCompletedAt(LocalDateTime.now());\n        quizAttemptRepository.save(attempt);\n        log.info(\"saved quiz attempt with id: {}\", attemptId);\n    }\n    @Override\n    public Quiz getQuizStatsById(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        getQuizAuthor(Collections.singletonList(quiz));\n        List<Question> questions = questionRepository.findByQuizId(id);\n        quiz.setQuestions(new HashSet<>(questions));\n        List<QuizAttempt> attempts = quizAttemptRepository.findByQuizId(quiz.getId().toString());\n        attempts.forEach(attempt -> {\n            userRepository.getUserById(attempt.getUserId().toString()).ifPresent(attempt::setUser);\n        });\n        quiz.setQuizAttempts(new HashSet<>(attempts));\n        List<User> savedUsers = savedQuizRepository.findAllByQuizId(id)\n                .stream()\n                .map(savedQuiz -> userRepository.getUserById(savedQuiz.getUserId().toString()).orElse(null))\n                .filter(Objects::nonNull)\n                .toList();\n        quiz.setSavedByUsers(new HashSet<>(savedUsers));\n        return quiz;\n    }\n    @Override\n    public void saveQuiz(String quizId, UUID userId) {\n        savedQuizRepository.saveQuiz(quizId, userId.toString());\n    }\n    @Override\n    public List<Quiz> getSavedQuizzes(UUID userId) {\n        List<UserSavedQuiz> savedQuizzes = savedQuizRepository.findAllByUserId(userId.toString());\n        if (CollectionUtils.isEmpty(savedQuizzes)) {\n            return Collections.emptyList();\n        }\n        Set<String> quizIds = savedQuizzes.stream()\n                .map(UserSavedQuiz::getQuizId)\n                .map(UUID::toString)\n                .collect(Collectors.toSet());\n        if (CollectionUtils.isEmpty(quizIds)) {\n            return Collections.emptyList();\n        }\n        List<Quiz> quizzes = quizRepository.findByIdIn(quizIds);\n        if (CollectionUtils.isEmpty(quizzes)) {\n            return Collections.emptyList();\n        }\n        getQuizAuthor(quizzes);\n        return quizzes;\n    }\n    @Override\n    public void unsaveQuiz(String quizId, UUID userId) {\n        UserSavedQuiz savedQuiz = savedQuizRepository.findAllByQuizId(quizId)\n                .stream()\n                .filter(q -> q.getUserId().equals(userId))\n                .findFirst()\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_SAVED));\n        savedQuiz.setSavedAt(LocalDateTime.now());\n        savedQuiz.setDeletedAt(null);\n        savedQuizRepository.update(savedQuiz);\n    }\n    @Override\n    public List<UserSavedQuiz> getUserSavedQuiz(String quizId, UUID userId) {\n        List<UserSavedQuiz> savedQuizzes = savedQuizRepository.findAllByUserId(userId.toString());\n        savedQuizzes.forEach(savedQuiz -> {\n            userRepository.getUserById(savedQuiz.getUserId().toString()).ifPresent(savedQuiz::setUser);\n        });\n        return savedQuizzes;\n    }\n    @Override\n    public List<Quiz> search(String query) {\n        if (query == null) throw new BusinessException(ErrorConstant.QUIZ_NOT_FOUND); \n        return quizRepository.findAll();\n    }\n    @Override\n    public List<Quiz> search2(String query) {\n        if (query == null) throw new BusinessException(ErrorConstant.QUIZ_NOT_FOUND); \n        return quizRepository.findAll();\n    }\n    private void getQuizAuthor(List<Quiz> quizzes) {\n        quizzes.forEach(q -> {\n            if (q.getAuthorId() != null) {\n                q.setAuthor(userRepository.getUserById(q.getAuthorId().toString()).orElse(null));\n            }\n        });\n    }\n    public static class QuizItem {\n        private String example(List<String, Map<String, List<Map<String, Quiz>>>> quix) {\n            return \"example\";\n        }\n    }\n}",
    "endpoints": [],
    "extends": [],
    "implements": [
      "QuizService"
    ],
    "extended_by": [],
    "implemented_by": [],
    "vars": [],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::createQuiz::66::72",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "createQuiz",
    "chunk_type": "service",
    "calls": [
      "QuizMapper.createQuizDtoToQuiz",
      "QuizRepository.save",
      "unknown.getId",
      "unknown.setAuthorId",
      "unknown.toString"
    ],
    "called_by": [],
    "line_start": 66,
    "line_end": 72,
    "content": "@Override\n    public BaseCreateUpdateResponse createQuiz(CreateQuizDto request, UUID authorId) {\n        Quiz q = quizMapper.createQuizDtoToQuiz(request);\n        q.setAuthorId(authorId);\n        quizRepository.save(q);\n        return new BaseCreateUpdateResponse(q.getId().toString());\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "BaseCreateUpdateResponse",
      "CreateQuizDto",
      "Quiz"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::updateQuiz::73::138",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "updateQuiz",
    "chunk_type": "service",
    "calls": [
      "CollectionUtils.isEmpty",
      "Collectors.toList",
      "Collectors.toMap",
      "Collectors.toSet",
      "CreateQuizDto.collect",
      "CreateQuizDto.filter",
      "CreateQuizDto.getId",
      "CreateQuizDto.getIsPublic",
      "CreateQuizDto.getQuestions",
      "CreateQuizDto.map",
      "CreateQuizDto.stream",
      "LocalDateTime.now",
      "QuestionMapper.questionDtoToQuestion",
      "QuestionMapper.updateQuestionFromDto",
      "QuestionRepository.countByQuizId",
      "QuestionRepository.deleteAll",
      "QuestionRepository.findByQuizId",
      "QuestionRepository.saveAll",
      "QuizMapper.updateQuizFromDto",
      "QuizRepository.findById",
      "QuizRepository.orElseThrow",
      "QuizRepository.save",
      "UUID.fromString",
      "UUID.randomUUID",
      "unknown.add",
      "unknown.collect",
      "unknown.contains",
      "unknown.filter",
      "unknown.get",
      "unknown.getId",
      "unknown.getOptions",
      "unknown.isEmpty",
      "unknown.setCreatedAt",
      "unknown.setId",
      "unknown.setQuestionCount",
      "unknown.setQuizId",
      "unknown.setStatus",
      "unknown.setUpdatedAt",
      "unknown.stream",
      "unknown.toString"
    ],
    "called_by": [],
    "line_start": 73,
    "line_end": 138,
    "content": "@Override\n    @Transactional(rollbackFor = Exception.class)\n    public BaseCreateUpdateResponse updateQuiz(CreateQuizDto request) {\n        if (request.getId() == null) {\n            throw new IllegalArgumentException(\"Quiz ID must be provided for update operation.\");\n        }\n        UUID quizId = UUID.fromString(request.getId());\n        Quiz existingQuiz = quizRepository.findById(request.getId())\n                .orElseThrow(() -> new EntityNotFoundException(\"Quiz with ID \" + request.getId() + \" not found.\"));\n        quizMapper.updateQuizFromDto(request, existingQuiz);\n        existingQuiz.setUpdatedAt(LocalDateTime.now());\n        if (request.getIsPublic()) {\n            existingQuiz.setStatus(QuizStatus.PUBLIC);\n        } else {\n            existingQuiz.setStatus(QuizStatus.DRAFT);\n        }\n        List<Question> existingQuestions = questionRepository.findByQuizId(request.getId());\n        Map<UUID, Question> existingQuestionMap = existingQuestions.stream()\n                .collect(Collectors.toMap(Question::getId, q -> q));\n        List<Question> questionsToSaveOrUpdate = new ArrayList<>();\n        Set<UUID> questionIdsInDto = request.getQuestions().stream()\n                .filter(qDto -> qDto.getId() != null)\n                .map(qDto -> UUID.fromString(qDto.getId()))\n                .collect(Collectors.toSet());\n        for (QuestionDto qDto : request.getQuestions()) {\n            if (qDto.getId() == null) {\n                Question newQuestion = questionMapper.questionDtoToQuestion(qDto);\n                newQuestion.setQuizId(quizId);\n                newQuestion.setCreatedAt(LocalDateTime.now());\n                newQuestion.setUpdatedAt(LocalDateTime.now());\n                if (!CollectionUtils.isEmpty(newQuestion.getOptions())) {\n                    for (QuestionOption option : newQuestion.getOptions()) {\n                        option.setId(UUID.randomUUID());\n                    }\n                }\n                questionsToSaveOrUpdate.add(newQuestion);\n            } else {\n                UUID qId = UUID.fromString(qDto.getId());\n                Question questionToUpdate = existingQuestionMap.get(qId);\n                if (questionToUpdate != null) {\n                    questionMapper.updateQuestionFromDto(qDto, questionToUpdate);\n                    questionToUpdate.setUpdatedAt(LocalDateTime.now());\n                    if (!CollectionUtils.isEmpty(questionToUpdate.getOptions())) {\n                        for (QuestionOption option : questionToUpdate.getOptions()) {\n                            if (option.getId() == null) {\n                                option.setId(UUID.randomUUID());\n                            }\n                        }\n                    }\n                    questionsToSaveOrUpdate.add(questionToUpdate);\n                }\n            }\n        }\n        List<Question> questionsToDelete = existingQuestions.stream()\n                .filter(eq -> !questionIdsInDto.contains(eq.getId()))\n                .collect(Collectors.toList());\n        if (!questionsToDelete.isEmpty()) {\n            questionRepository.deleteAll(questionsToDelete);\n        }\n        if (!questionsToSaveOrUpdate.isEmpty()) {\n            questionRepository.saveAll(questionsToSaveOrUpdate);\n        }\n        existingQuiz.setQuestionCount(questionRepository.countByQuizId(quizId.toString()));\n        quizRepository.save(existingQuiz);\n        return new BaseCreateUpdateResponse(existingQuiz.getId().toString());\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "BaseCreateUpdateResponse",
      "CreateQuizDto",
      "Quiz",
      "EntityNotFoundException",
      "Question",
      "QuestionDto",
      "QuestionOption"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::getAllPublicQuizzes::139::144",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "getAllPublicQuizzes",
    "chunk_type": "service",
    "calls": [
      "QuizRepository.findAllPublic",
      "QuizServiceImpl.getQuizAuthor"
    ],
    "called_by": [],
    "line_start": 139,
    "line_end": 144,
    "content": "@Override\n    public List<Quiz> getAllPublicQuizzes() {\n        List<Quiz> quizzes = quizRepository.findAllPublic();\n        getQuizAuthor(quizzes);\n        return quizzes;\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "Quiz"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::getMyQuizzes::145::150",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "getMyQuizzes",
    "chunk_type": "service",
    "calls": [
      "QuizRepository.findByUserId",
      "QuizServiceImpl.getQuizAuthor"
    ],
    "called_by": [],
    "line_start": 145,
    "line_end": 150,
    "content": "@Override\n    public List<Quiz> getMyQuizzes(UUID id) {\n        List<Quiz> quizzes = quizRepository.findByUserId(id);\n        getQuizAuthor(quizzes);\n        return quizzes;\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "Quiz"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::getById::151::159",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "getById",
    "chunk_type": "service",
    "calls": [
      "Collections.singletonList",
      "QuestionRepository.findByQuizId",
      "QuizRepository.findById",
      "QuizRepository.orElseThrow",
      "QuizServiceImpl.getQuizAuthor",
      "unknown.setQuestions"
    ],
    "called_by": [],
    "line_start": 151,
    "line_end": 159,
    "content": "@Override\n    public Quiz getById(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        Set<Question> questions = new HashSet<>(questionRepository.findByQuizId(id));\n        quiz.setQuestions(questions);\n        getQuizAuthor(Collections.singletonList(quiz));\n        return quiz;\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "Quiz",
      "BusinessException",
      "Question"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::deleteQuiz::160::166",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "deleteQuiz",
    "chunk_type": "service",
    "calls": [
      "LocalDateTime.now",
      "QuizRepository.findById",
      "QuizRepository.orElseThrow",
      "QuizRepository.save",
      "unknown.setDeletedAt"
    ],
    "called_by": [],
    "line_start": 160,
    "line_end": 166,
    "content": "@Override\n    public void deleteQuiz(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        quiz.setDeletedAt(LocalDateTime.now());\n        quizRepository.save(quiz);\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "Quiz",
      "BusinessException"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::startQuiz::167::182",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "startQuiz",
    "chunk_type": "service",
    "calls": [
      "QuizAttemptRepository.save",
      "QuizRepository.findById",
      "QuizRepository.orElseThrow",
      "UUID.fromString",
      "unknown.getId",
      "unknown.setCompletedAt",
      "unknown.setCorrectAnswers",
      "unknown.setPassed",
      "unknown.setQuizId",
      "unknown.setScore",
      "unknown.setTimeSpent",
      "unknown.setUserId",
      "unknown.toString"
    ],
    "called_by": [],
    "line_start": 167,
    "line_end": 182,
    "content": "@Override\n    @Transactional\n    public BaseCreateUpdateResponse startQuiz(String quizId, UUID userId) {\n        quizRepository.findById(quizId)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        QuizAttempt quizAttempt = new QuizAttempt();\n        quizAttempt.setQuizId(UUID.fromString(quizId));\n        quizAttempt.setUserId(userId);\n        quizAttempt.setScore(BigDecimal.ZERO);\n        quizAttempt.setCorrectAnswers(0);\n        quizAttempt.setTimeSpent(0L);\n        quizAttempt.setCompletedAt(null);\n        quizAttempt.setPassed(false);\n        QuizAttempt savedAttempt = quizAttemptRepository.save(quizAttempt);\n        return new BaseCreateUpdateResponse(savedAttempt.getId().toString());\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "BaseCreateUpdateResponse",
      "BusinessException",
      "QuizAttempt"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::submitQuizQuestion::183::312",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "submitQuizQuestion",
    "chunk_type": "service",
    "calls": [
      "BigDecimal.valueOf",
      "CollectionUtils.isEmpty",
      "Collections.sort",
      "Collectors.toList",
      "Duration.between",
      "Duration.toMinutes",
      "FileUtils.convertToBase64",
      "JsonUtils.toJsonString",
      "LocalDateTime.now",
      "Objects.equals",
      "PronunciationAccuracyRequestDto.base64Audio",
      "PronunciationAccuracyRequestDto.build",
      "PronunciationAccuracyRequestDto.builder",
      "PronunciationAccuracyRequestDto.text",
      "PronunciationServiceImpl.getAccuracy",
      "QuestionRepository.findById",
      "QuestionRepository.orElseThrow",
      "QuizAnswerRepository.delete",
      "QuizAnswerRepository.findByQuizAttemptId",
      "QuizAnswerRepository.save",
      "QuizAttemptRepository.findById",
      "QuizAttemptRepository.orElseThrow",
      "QuizAttemptRepository.save",
      "QuizRepository.findById",
      "QuizRepository.orElseThrow",
      "ResourceService.downloadResourceFromUrl",
      "SubmitAnswerRequest.collect",
      "SubmitAnswerRequest.contains",
      "SubmitAnswerRequest.equals",
      "SubmitAnswerRequest.filter",
      "SubmitAnswerRequest.getAnswerText",
      "SubmitAnswerRequest.getAudioUrl",
      "SubmitAnswerRequest.getFillInBlanksAnswers",
      "SubmitAnswerRequest.getQuestionId",
      "SubmitAnswerRequest.getSelectedOptions",
      "SubmitAnswerRequest.getTimeTaken",
      "SubmitAnswerRequest.getUserAnswerTrueFalse",
      "SubmitAnswerRequest.isEmpty",
      "SubmitAnswerRequest.map",
      "SubmitAnswerRequest.stream",
      "SubmitAnswerRequest.trim",
      "UUID.fromString",
      "unknown.add",
      "unknown.collect",
      "unknown.equals",
      "unknown.equalsIgnoreCase",
      "unknown.error",
      "unknown.exists",
      "unknown.filter",
      "unknown.get",
      "unknown.getAcceptRate",
      "unknown.getCompletedAt",
      "unknown.getCorrectAnswer",
      "unknown.getCorrectAnswers",
      "unknown.getCorrectBlanks",
      "unknown.getCreatedAt",
      "unknown.getFirst",
      "unknown.getId",
      "unknown.getMessage",
      "unknown.getOptions",
      "unknown.getPoints",
      "unknown.getPronunciationAccuracy",
      "unknown.getPronunciationText",
      "unknown.getQuestionId",
      "unknown.getQuizId",
      "unknown.getScore",
      "unknown.getScoreAchieved",
      "unknown.getTimeLimit",
      "unknown.getTrueFalseAnswer",
      "unknown.getType",
      "unknown.isCorrect",
      "unknown.isEmpty",
      "unknown.map",
      "unknown.name",
      "unknown.plusMinutes",
      "unknown.println",
      "unknown.setAnswerText",
      "unknown.setAudioUrl",
      "unknown.setCompletedAt",
      "unknown.setCorrect",
      "unknown.setCorrectAnswers",
      "unknown.setFillInBlanksAnswers",
      "unknown.setQuestionId",
      "unknown.setQuizAttemptId",
      "unknown.setScore",
      "unknown.setScoreAchieved",
      "unknown.setSelectedAnswers",
      "unknown.setTimeSpent",
      "unknown.setTimeTaken",
      "unknown.size",
      "unknown.sort",
      "unknown.sorted",
      "unknown.stream",
      "unknown.subtract",
      "unknown.toList",
      "unknown.toLowerCase",
      "unknown.toString",
      "unknown.trim"
    ],
    "called_by": [],
    "line_start": 183,
    "line_end": 312,
    "content": "@Override\n    @Transactional\n    public BaseCreateUpdateResponse submitQuizQuestion(String attemptId, SubmitAnswerRequest request, UUID id) {\n        UUID questionId = UUID.fromString(request.getQuestionId());\n        QuizAttempt quizAttempt = quizAttemptRepository.findById(attemptId)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n        if (quizAttempt.getCompletedAt() != null) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_SUBMITTED);\n        }\n        Quiz quiz = quizRepository.findById(quizAttempt.getQuizId().toString()).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        if (quiz.getTimeLimit() != null && quizAttempt.getCreatedAt() != null) {\n            LocalDateTime start = quizAttempt.getCreatedAt();\n            LocalDateTime end = LocalDateTime.now();\n            long timeSpent = Duration.between(start, end).toMinutes();\n            if (timeSpent > quiz.getTimeLimit()) {\n                quizAttempt.setTimeSpent(timeSpent);\n                quizAttempt.setCompletedAt(quizAttempt.getCreatedAt().plusMinutes(timeSpent));\n                quizAttemptRepository.save(quizAttempt);\n                throw new BusinessException(ErrorConstant.QUIZ_TIME_LIMIT_EXCEEDED);\n            }\n        }\n        Question question = questionRepository.findById(request.getQuestionId())\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUESTION_NOT_FOUND));\n        if (!Objects.equals(question.getQuizId(), quizAttempt.getQuizId())) {\n            throw new BusinessException(ErrorConstant.QUESTION_DOES_NOT_BELONG_TO_QUIZ);\n        }\n        QuizAnswer quizAnswer = new QuizAnswer();\n        quizAnswer.setQuestionId(questionId);\n        if (QuestionType.MULTIPLE_CHOICE.name().equals(question.getType()) && !CollectionUtils.isEmpty(question.getOptions())) {\n            List<QuestionOption> options = question.getOptions().stream()\n                    .filter(option -> option.getId() != null && request.getSelectedOptions().contains(option.getId().toString()))\n                    .collect(Collectors.toList());\n            quizAnswer.setSelectedAnswers(options);\n        }\n        quizAnswer.setFillInBlanksAnswers(request.getFillInBlanksAnswers());\n        quizAnswer.setAnswerText(request.getAnswerText());\n        quizAnswer.setTimeTaken(request.getTimeTaken());\n        quizAnswer.setAudioUrl(request.getAudioUrl());\n        boolean isCorrect = false;\n        Integer scoreAchieved = 0;\n        switch (question.getType().toLowerCase()) {\n            case \"multiple_choice\":\n                List<String> userSelectedValues = request.getSelectedOptions() != null ?\n                        request.getSelectedOptions().stream()\n                                .filter(Objects::nonNull)\n                                .collect(Collectors.toList()) : new ArrayList<>();\n                List<String> correctOptionValues = question.getCorrectAnswer() != null ?\n                        question.getOptions().stream().filter(QuestionOption::getIsCorrect).map(i -> i.getId().toString()).sorted().toList() : new ArrayList<>();\n                userSelectedValues.sort(String::compareTo);\n                isCorrect = userSelectedValues.equals(correctOptionValues);\n                break;\n            case \"true_false\":\n                isCorrect = (request.getUserAnswerTrueFalse() != null &&\n                        request.getUserAnswerTrueFalse().equals(question.getTrueFalseAnswer()));\n                break;\n            case \"fill_in_the_blank\":\n                List<String> userFillInBlanks = request.getFillInBlanksAnswers() != null ?\n                        request.getFillInBlanksAnswers().stream()\n                                .filter(Objects::nonNull)\n                                .map(i -> i.toLowerCase().trim())\n                                .collect(Collectors.toList()) : new ArrayList<>();\n                List<String> correctBlanks = question.getCorrectBlanks() != null ?\n                        question.getCorrectBlanks().stream()\n                                .filter(Objects::nonNull)\n                                .map(i -> i.toLowerCase().trim())\n                                .collect(Collectors.toList()) : new ArrayList<>();\n                Collections.sort(userFillInBlanks);\n                Collections.sort(correctBlanks);\n                isCorrect = userFillInBlanks.equals(correctBlanks);\n                break;\n            case \"short_answer\":\n                isCorrect = (request.getAnswerText() != null &&\n                        question.getCorrectAnswer() != null &&\n                        !question.getCorrectAnswer().isEmpty() &&\n                        question.getCorrectAnswer().getFirst().equalsIgnoreCase(request.getAnswerText().trim()));\n                break;\n            case \"pronunciation\":\n                if (request.getAudioUrl() == null || request.getAudioUrl().isEmpty()) {\n                    break;\n                }\n                File audioFile = resourceService.downloadResourceFromUrl(request.getAudioUrl());\n                if (audioFile == null || !audioFile.exists()) {\n                    break;\n                }\n                String base64File = \"data:audio/ogg;;base64,\" + FileUtils.convertToBase64(audioFile);\n                if (base64File == null) {\n                    break;\n                }\n                try {\n                    PronunciationAccuracyResponseDto pronunAccuracy = pronunciationService.getAccuracy(\n                            PronunciationAccuracyRequestDto.builder()\n                                    .base64Audio(base64File)\n                                    .text(question.getPronunciationText())\n                                    .build()\n                    );\n                    isCorrect = pronunAccuracy.getPronunciationAccuracy() >= question.getAcceptRate();\n                    quizAnswer.setAnswerText(JsonUtils.toJsonString(pronunAccuracy));\n                } catch (Exception e) {\n                    log.error(\"Error while checking pronunciation accuracy: {}\", e.getMessage());\n                }\n                break;\n            default:\n                System.err.println(\"Unknown question type: \" + question.getType());\n        }\n        if (isCorrect) {\n            scoreAchieved = question.getPoints() != null ? question.getPoints() : 0;\n        }\n        quizAnswer.setCorrect(isCorrect);\n        quizAnswer.setScoreAchieved(scoreAchieved);\n        List<QuizAnswer> currentAnswers = quizAnswerRepository.findByQuizAttemptId(attemptId);\n        for (int i = 0; i < currentAnswers.size(); i++) {\n            if (currentAnswers.get(i).getQuestionId().equals(questionId)) {\n                QuizAnswer oldAnswer = currentAnswers.get(i);\n                quizAttempt.setScore(quizAttempt.getScore().subtract(BigDecimal.valueOf(oldAnswer.getScoreAchieved())));\n                if (oldAnswer.isCorrect()) {\n                    quizAttempt.setCorrectAnswers(quizAttempt.getCorrectAnswers() - 1);\n                }\n                quizAnswerRepository.delete(oldAnswer);\n                break;\n            }\n        }\n        quizAnswer.setQuizAttemptId(UUID.fromString(attemptId));\n        quizAnswerRepository.save(quizAnswer);\n        quizAttempt.setScore(quizAttempt.getScore().add(BigDecimal.valueOf(scoreAchieved)));\n        if (isCorrect) {\n            quizAttempt.setCorrectAnswers(quizAttempt.getCorrectAnswers() + 1);\n        }\n        quizAttemptRepository.save(quizAttempt);\n        return new BaseCreateUpdateResponse(quizAnswer.getId().toString());\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "BaseCreateUpdateResponse",
      "SubmitAnswerRequest",
      "QuizAttempt",
      "BusinessException",
      "Quiz",
      "Question",
      "QuizAnswer",
      "QuestionOption",
      "PronunciationAccuracyResponseDto"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::getMyQuizAttempts::313::334",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "getMyQuizAttempts",
    "chunk_type": "service",
    "calls": [
      "CollectionUtils.isEmpty",
      "Collections.emptyList",
      "Collectors.groupingBy",
      "Collectors.toSet",
      "QuizAttemptRepository.findByUserId",
      "QuizRepository.findByIdIn",
      "QuizServiceImpl.getQuizAuthor",
      "UUID.fromString",
      "unknown.collect",
      "unknown.get",
      "unknown.getId",
      "unknown.map",
      "unknown.setQuizAttempts",
      "unknown.stream"
    ],
    "called_by": [],
    "line_start": 313,
    "line_end": 334,
    "content": "@Override\n    public List<Quiz> getMyQuizAttempts(String userId) {\n        List<QuizAttempt> attempts = quizAttemptRepository.findByUserId(UUID.fromString(userId));\n        if (CollectionUtils.isEmpty(attempts)) {\n            return Collections.emptyList();\n        }\n        Set<String> quizId = attempts.stream()\n                .map(QuizAttempt::getQuizId)\n                .map(UUID::toString)\n                .collect(Collectors.toSet());\n        List<Quiz> quizzes = quizRepository.findByIdIn(quizId);\n        if (CollectionUtils.isEmpty(quizzes)) {\n            return Collections.emptyList();\n        }\n        getQuizAuthor(quizzes);\n        Map<UUID, List<QuizAttempt>> attemptMap = attempts.stream()\n                .collect(Collectors.groupingBy(QuizAttempt::getQuizId));\n        for (Quiz quiz : quizzes) {\n            quiz.setQuizAttempts(new HashSet<>(attemptMap.get(quiz.getId())));\n        }\n        return quizzes;\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "Quiz",
      "QuizAttempt"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::getAttempt::335::344",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "getAttempt",
    "chunk_type": "service",
    "calls": [
      "Collections.singletonList",
      "QuizAnswerRepository.findByQuizAttemptId",
      "QuizAttemptRepository.findById",
      "QuizAttemptRepository.orElseThrow",
      "QuizServiceImpl.getQuizAuthor",
      "unknown.getById",
      "unknown.getQuizId",
      "unknown.setAnswers",
      "unknown.setQuiz",
      "unknown.toString"
    ],
    "called_by": [],
    "line_start": 335,
    "line_end": 344,
    "content": "@Override\n    public QuizAttempt getAttempt(String attemptId, UUID userId) {\n        QuizAttempt attempt = quizAttemptRepository.findById(attemptId).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n        Quiz quiz = this.getById(attempt.getQuizId().toString());\n        getQuizAuthor(Collections.singletonList(quiz));\n        attempt.setQuiz(quiz);\n        List<QuizAnswer> answers = quizAnswerRepository.findByQuizAttemptId(attemptId);\n        attempt.setAnswers(answers);\n        return attempt;\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "QuizAttempt",
      "BusinessException",
      "Quiz",
      "QuizAnswer"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::submitQuizComplete::345::357",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "submitQuizComplete",
    "chunk_type": "service",
    "calls": [
      "LocalDateTime.now",
      "QuizAttemptRepository.findById",
      "QuizAttemptRepository.orElseThrow",
      "QuizAttemptRepository.save",
      "UUID.equals",
      "unknown.getCompletedAt",
      "unknown.getUserId",
      "unknown.info",
      "unknown.setCompletedAt"
    ],
    "called_by": [],
    "line_start": 345,
    "line_end": 357,
    "content": "@Override\n    public void submitQuizComplete(String attemptId, UUID id) {\n        QuizAttempt attempt = quizAttemptRepository.findById(attemptId).orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_FOUND));\n        if (!id.equals(attempt.getUserId())) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_NOT_BELONG_TO_USER);\n        }\n        if (attempt.getCompletedAt() != null) {\n            throw new BusinessException(ErrorConstant.QUIZ_ATTEMPT_SUBMITTED);\n        }\n        attempt.setCompletedAt(LocalDateTime.now());\n        quizAttemptRepository.save(attempt);\n        log.info(\"saved quiz attempt with id: {}\", attemptId);\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "QuizAttempt",
      "BusinessException"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::getQuizStatsById::358::377",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "getQuizStatsById",
    "chunk_type": "service",
    "calls": [
      "Collections.singletonList",
      "QuestionRepository.findByQuizId",
      "QuizAttemptRepository.findByQuizId",
      "QuizRepository.findById",
      "QuizRepository.orElseThrow",
      "QuizServiceImpl.getQuizAuthor",
      "SavedQuizRepository.filter",
      "SavedQuizRepository.findAllByQuizId",
      "SavedQuizRepository.map",
      "SavedQuizRepository.stream",
      "SavedQuizRepository.toList",
      "UserRepository.getUserById",
      "UserRepository.ifPresent",
      "UserRepository.orElse",
      "unknown.forEach",
      "unknown.getId",
      "unknown.getUserId",
      "unknown.setQuestions",
      "unknown.setQuizAttempts",
      "unknown.setSavedByUsers",
      "unknown.toString"
    ],
    "called_by": [],
    "line_start": 358,
    "line_end": 377,
    "content": "@Override\n    public Quiz getQuizStatsById(String id) {\n        Quiz quiz = quizRepository.findById(id)\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_FOUND));\n        getQuizAuthor(Collections.singletonList(quiz));\n        List<Question> questions = questionRepository.findByQuizId(id);\n        quiz.setQuestions(new HashSet<>(questions));\n        List<QuizAttempt> attempts = quizAttemptRepository.findByQuizId(quiz.getId().toString());\n        attempts.forEach(attempt -> {\n            userRepository.getUserById(attempt.getUserId().toString()).ifPresent(attempt::setUser);\n        });\n        quiz.setQuizAttempts(new HashSet<>(attempts));\n        List<User> savedUsers = savedQuizRepository.findAllByQuizId(id)\n                .stream()\n                .map(savedQuiz -> userRepository.getUserById(savedQuiz.getUserId().toString()).orElse(null))\n                .filter(Objects::nonNull)\n                .toList();\n        quiz.setSavedByUsers(new HashSet<>(savedUsers));\n        return quiz;\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "Quiz",
      "BusinessException",
      "Question",
      "QuizAttempt",
      "User"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::saveQuiz::378::381",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "saveQuiz",
    "chunk_type": "service",
    "calls": [
      "SavedQuizRepository.saveQuiz",
      "UUID.toString"
    ],
    "called_by": [],
    "line_start": 378,
    "line_end": 381,
    "content": "@Override\n    public void saveQuiz(String quizId, UUID userId) {\n        savedQuizRepository.saveQuiz(quizId, userId.toString());\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::getSavedQuizzes::382::401",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "getSavedQuizzes",
    "chunk_type": "service",
    "calls": [
      "CollectionUtils.isEmpty",
      "Collections.emptyList",
      "Collectors.toSet",
      "QuizRepository.findByIdIn",
      "QuizServiceImpl.getQuizAuthor",
      "SavedQuizRepository.findAllByUserId",
      "UUID.toString",
      "unknown.collect",
      "unknown.map",
      "unknown.stream"
    ],
    "called_by": [],
    "line_start": 382,
    "line_end": 401,
    "content": "@Override\n    public List<Quiz> getSavedQuizzes(UUID userId) {\n        List<UserSavedQuiz> savedQuizzes = savedQuizRepository.findAllByUserId(userId.toString());\n        if (CollectionUtils.isEmpty(savedQuizzes)) {\n            return Collections.emptyList();\n        }\n        Set<String> quizIds = savedQuizzes.stream()\n                .map(UserSavedQuiz::getQuizId)\n                .map(UUID::toString)\n                .collect(Collectors.toSet());\n        if (CollectionUtils.isEmpty(quizIds)) {\n            return Collections.emptyList();\n        }\n        List<Quiz> quizzes = quizRepository.findByIdIn(quizIds);\n        if (CollectionUtils.isEmpty(quizzes)) {\n            return Collections.emptyList();\n        }\n        getQuizAuthor(quizzes);\n        return quizzes;\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "Quiz",
      "UserSavedQuiz"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::unsaveQuiz::402::412",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "unsaveQuiz",
    "chunk_type": "service",
    "calls": [
      "LocalDateTime.now",
      "SavedQuizRepository.filter",
      "SavedQuizRepository.findAllByQuizId",
      "SavedQuizRepository.findFirst",
      "SavedQuizRepository.orElseThrow",
      "SavedQuizRepository.stream",
      "SavedQuizRepository.update",
      "unknown.equals",
      "unknown.getUserId",
      "unknown.setDeletedAt",
      "unknown.setSavedAt"
    ],
    "called_by": [],
    "line_start": 402,
    "line_end": 412,
    "content": "@Override\n    public void unsaveQuiz(String quizId, UUID userId) {\n        UserSavedQuiz savedQuiz = savedQuizRepository.findAllByQuizId(quizId)\n                .stream()\n                .filter(q -> q.getUserId().equals(userId))\n                .findFirst()\n                .orElseThrow(() -> new BusinessException(ErrorConstant.QUIZ_NOT_SAVED));\n        savedQuiz.setSavedAt(LocalDateTime.now());\n        savedQuiz.setDeletedAt(null);\n        savedQuizRepository.update(savedQuiz);\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "UserSavedQuiz",
      "BusinessException"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::getUserSavedQuiz::413::420",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "getUserSavedQuiz",
    "chunk_type": "service",
    "calls": [
      "SavedQuizRepository.findAllByUserId",
      "UUID.toString",
      "UserRepository.getUserById",
      "UserRepository.ifPresent",
      "unknown.forEach",
      "unknown.getUserId",
      "unknown.toString"
    ],
    "called_by": [],
    "line_start": 413,
    "line_end": 420,
    "content": "@Override\n    public List<UserSavedQuiz> getUserSavedQuiz(String quizId, UUID userId) {\n        List<UserSavedQuiz> savedQuizzes = savedQuizRepository.findAllByUserId(userId.toString());\n        savedQuizzes.forEach(savedQuiz -> {\n            userRepository.getUserById(savedQuiz.getUserId().toString()).ifPresent(savedQuiz::setUser);\n        });\n        return savedQuizzes;\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "UserSavedQuiz"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::search::421::425",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "search",
    "chunk_type": "service",
    "calls": [
      "QuizRepository.findAll"
    ],
    "called_by": [],
    "line_start": 421,
    "line_end": 425,
    "content": "@Override\n    public List<Quiz> search(String query) {\n        if (query == null) throw new BusinessException(ErrorConstant.QUIZ_NOT_FOUND); \n        return quizRepository.findAll();\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "Quiz",
      "BusinessException"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::search2::426::430",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "search2",
    "chunk_type": "service",
    "calls": [
      "QuizRepository.findAll"
    ],
    "called_by": [],
    "line_start": 426,
    "line_end": 430,
    "content": "@Override\n    public List<Quiz> search2(String query) {\n        if (query == null) throw new BusinessException(ErrorConstant.QUIZ_NOT_FOUND); \n        return quizRepository.findAll();\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "Quiz",
      "BusinessException"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  },
  {
    "id": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java::QuizServiceImpl::getQuizAuthor::431::437",
    "project_id": "main",
    "file_path": "F:\\_side_projects\\source_atlas\\data\\repo\\test\\QuizServiceImpl.java",
    "class_name": "QuizServiceImpl",
    "method_name": "getQuizAuthor",
    "chunk_type": "service",
    "calls": [
      "List<Quiz>.forEach",
      "UserRepository.getUserById",
      "UserRepository.orElse",
      "unknown.getAuthorId",
      "unknown.setAuthor",
      "unknown.toString"
    ],
    "called_by": [
      "QuizServiceImpl.getAllPublicQuizzes",
      "QuizServiceImpl.getMyQuizzes",
      "QuizServiceImpl.getById",
      "QuizServiceImpl.getMyQuizAttempts",
      "QuizServiceImpl.getAttempt",
      "QuizServiceImpl.getQuizStatsById",
      "QuizServiceImpl.getSavedQuizzes"
    ],
    "line_start": 431,
    "line_end": 437,
    "content": "private void getQuizAuthor(List<Quiz> quizzes) {\n        quizzes.forEach(q -> {\n            if (q.getAuthorId() != null) {\n                q.setAuthor(userRepository.getUserById(q.getAuthorId().toString()).orElse(null));\n            }\n        });\n    }",
    "endpoints": [],
    "extends": [],
    "implements": [],
    "extended_by": [],
    "implemented_by": [],
    "vars": [
      "Quiz"
    ],
    "summary": "",
    "is_job": false,
    "job_info": null,
    "publishes_to": [],
    "listens_to": [],
    "configures": [],
    "configured_by": []
  }
]